/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => SupSubPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var SupSubPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.styleEl = null;
    this.isWrapping = false;
    // Flag to prevent re-triggering
    this.selectionStart = null;
    this.selectionEnd = null;
  }
  onload() {
    console.log("SupSub Plugin loaded");
    this.addCommand({
      id: "wrap-sup",
      name: "Wrap with <sup> tags",
      editorCallback: (editor, view) => this.wrapSelection("sup", editor),
      hotkeys: [
        {
          modifiers: ["Mod", "Alt"],
          key: "="
        }
      ]
    });
    this.addCommand({
      id: "wrap-sub",
      name: "Wrap with <sub> tags",
      editorCallback: (editor, view) => this.wrapSelection("sub", editor),
      hotkeys: [
        {
          modifiers: ["Mod", "Alt"],
          key: "-"
        }
      ]
    });
    const style = `
            .supsub-popup {
                position: absolute;
                background: var(--background-primary);
                border: 1px solid var(--border);
                padding: 5px;
                border-radius: 8px; /* Enhanced rounding */
                box-shadow: 0 2px 5px rgba(0,0,0,0.2);
                z-index: 10000; /* Increased z-index */
                display: flex;
                gap: 5px;
                transition: opacity 0.1s ease; /* Shorter transition */
                opacity: 0;
                pointer-events: none;
            }
            .supsub-popup.visible {
                opacity: 1;
                pointer-events: auto;
            }
            .supsub-popup button {
                background: var(--background-modifier-hover);
                border: none;
                padding: 5px 10px;
                border-radius: 4px; /* Enhanced rounding */
                cursor: pointer;
                font-size: 12px;
                transition: background 0.2s ease;
            }
            .supsub-popup button:hover {
                background: var(--background-modifier-hover-active);
            }
        `;
    this.styleEl = document.createElement("style");
    this.styleEl.innerText = style;
    document.head.appendChild(this.styleEl);
    this.register(() => {
      if (this.styleEl) {
        this.styleEl.remove();
      }
    });
    this.registerEvent(this.app.workspace.on("editor-selection-change", (editor) => {
      if (this.isWrapping)
        return;
      const selection = editor.getSelection();
      if (selection) {
        this.showSupSubButtons(editor);
      } else {
        this.hideSupSubButtons();
      }
    }));
    this.registerDomEvent(document, "click", (evt) => {
      const target = evt.target;
      if (!target.closest(".supsub-popup")) {
        this.hideSupSubButtons();
      }
    });
  }
  onunload() {
    console.log("SupSub Plugin unloaded");
    this.hideSupSubButtons();
    if (this.styleEl) {
      this.styleEl.remove();
    }
  }
  showSupSubButtons(editor) {
    this.hideSupSubButtons();
    const selection = editor.getSelection();
    if (!selection)
      return;
    const cursorStart = editor.getCursor("from");
    const cursorEnd = editor.getCursor("to");
    this.selectionStart = { ...cursorStart };
    this.selectionEnd = { ...cursorEnd };
    const currentTag = this.getCurrentTag(selection);
    const buttonContainer = document.createElement("div");
    buttonContainer.className = "supsub-popup";
    if (currentTag === "sup" || currentTag === "sub") {
      const normalButton = document.createElement("button");
      normalButton.innerText = "Normal (n)";
      normalButton.setAttribute("aria-label", "Remove superscript/subscript");
      normalButton.addEventListener("mousedown", (e) => {
        e.preventDefault();
        e.stopPropagation();
        this.wrapSelection(currentTag, editor);
      });
      buttonContainer.appendChild(normalButton);
    } else {
      const supButton = document.createElement("button");
      supButton.innerText = "Sup (\u207F)";
      supButton.setAttribute("aria-label", "Wrap selected text with superscript");
      supButton.addEventListener("mousedown", (e) => {
        e.preventDefault();
        e.stopPropagation();
        this.wrapSelection("sup", editor);
      });
      const subButton = document.createElement("button");
      subButton.innerText = "Sub (\u2099)";
      subButton.setAttribute("aria-label", "Wrap selected text with subscript");
      subButton.addEventListener("mousedown", (e) => {
        e.preventDefault();
        e.stopPropagation();
        this.wrapSelection("sub", editor);
      });
      buttonContainer.appendChild(supButton);
      buttonContainer.appendChild(subButton);
    }
    buttonContainer.style.position = "absolute";
    document.body.appendChild(buttonContainer);
    this.positionPopup(buttonContainer, editor);
    requestAnimationFrame(() => {
      buttonContainer.classList.add("visible");
    });
  }
  hideSupSubButtons() {
    const buttonContainers = document.querySelectorAll(".supsub-popup");
    buttonContainers.forEach((buttonContainer) => {
      buttonContainer.classList.remove("visible");
      setTimeout(() => {
        buttonContainer.remove();
      }, 100);
    });
  }
  positionPopup(popup, editor) {
    const selection = window.getSelection();
    if (selection && selection.rangeCount > 0) {
      const range = selection.getRangeAt(0);
      const rect = range.getBoundingClientRect();
      const top = rect.bottom + window.scrollY + 5;
      const left = rect.left + rect.width / 2 - popup.offsetWidth / 2;
      const maxLeft = window.innerWidth - popup.offsetWidth - 10;
      const calculatedLeft = Math.max(10, Math.min(left, maxLeft));
      popup.style.top = `${top}px`;
      popup.style.left = `${calculatedLeft}px`;
      console.log(`Popup positioned at top: ${top}px, left: ${calculatedLeft}px`);
    }
  }
  wrapSelection(tag, editor) {
    this.isWrapping = true;
    if (this.selectionStart && this.selectionEnd) {
      editor.setSelection(this.selectionStart, this.selectionEnd);
    }
    editor.focus();
    setTimeout(() => {
      const selection = editor.getSelection();
      console.log(`Wrapping selection: "${selection}" with tag: <${tag}>`);
      if (selection) {
        const regex = new RegExp(`<${tag}>(.*?)</${tag}>`, "s");
        const matches = regex.exec(selection);
        if (matches) {
          const debracketedSelection = matches[1];
          editor.replaceSelection(debracketedSelection);
          new import_obsidian.Notice(`${tag} tags removed`);
        } else {
          const wrappedSelection = `<${tag}>${selection}</${tag}>`;
          editor.replaceSelection(wrappedSelection);
          new import_obsidian.Notice(`${tag} tags added`);
        }
        this.hideSupSubButtons();
      } else {
      }
      const currentCursor = editor.getCursor();
      editor.setSelection(currentCursor, currentCursor);
      this.isWrapping = false;
    }, 50);
  }
  getCurrentTag(selection) {
    const supRegex = /^<sup>([\s\S]+)<\/sup>$/i;
    const subRegex = /^<sub>([\s\S]+)<\/sub>$/i;
    if (supRegex.test(selection)) {
      return "sup";
    } else if (subRegex.test(selection)) {
      return "sub";
    } else {
      return null;
    }
  }
};
//# sourceMappingURL=data:application/json;base64,
